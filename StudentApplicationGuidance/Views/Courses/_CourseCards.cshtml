@model List<Course>

@foreach (var course in Model)
{
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@course.CourseName</h5>
                <h6 class="card-subtitle mb-2 text-muted">@course.University</h6>
                <p class="card-text">Required Points: @course.Points</p>

                <h6 class="mt-3">Required Subjects:</h6>
                <ul class="list-unstyled">
                    @foreach (var subject in course.SubjectRequired)
                    {

                       @*  if(subject.Subject.Name=="English Home Language") *@
                        <li><small>@subject.Subject.Name (Level @subject.SubjectLevel)</small></li>

                    }
                </ul>

                @if (course.AlternativeSubjects.Any())
                {
                   @*  <h6 class="mt-3">English (Home Language or First Additional Language) is required, along with at least one additional subject:</h6> *@
                    <ul class="list-unstyled">
                        @foreach (var altSubject in course.AlternativeSubjects.Take(5))
                        {

                            <li><small>@altSubject.AlternativeSubjectName (Level @altSubject.AlternativeSubjectLevel)</small></li>
                        }

                        @if (course.AlternativeSubjects.Count() > 5)
                        {
                            <li style="color: #800080;">... and other designated subjects</li>

                        }
                    </ul>
                }
                <!-- Eligibility Message Section -->
                <div id="eligibilityMessage_@course.CourseId" class="mt-3 p-3 border rounded">
                    <h6 class="mb-2">Eligibility Message</h6>
                    <p id="eligibilityText_@course.CourseId"><!-- Eligibility message will be inserted here --></p>
                </div>

                <a href="@Url.Action("CheckQualification", "Courses", new { university = course.University, courseName = course.CourseName })"
                   class="btn btn-primary mt-2"
                   onclick="loadCareerAdvice(@course.CourseId); return false;">
                    View more details
                </a>
            </div>
        </div>
    </div>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Function to load career advice and update eligibility message
        function loadCareerAdvice(courseId) {
            // Simulate fetching career advice and eligibility from the server
            // Replace this URL with your actual endpoint
            fetch(`/Courses/GetCareerAdviceAndEligibility?courseId=${courseId}`)
                .then(response => response.json())
                .then(data => {
                    // Assuming the response contains 'advice' for career advice and 'qualifies' for eligibility status
                    const eligibilityText = document.getElementById(`eligibilityText_${courseId}`);
                    const eligibilityMessage = document.getElementById(`eligibilityMessage_${courseId}`);
                    eligibilityText.textContent = data.message; // Update the message based on eligibility

                    // Update the eligibility message's appearance
                    eligibilityMessage.classList.remove('bg-success', 'bg-danger', 'text-white'); // Remove existing classes
                    if (data.qualifies) {
                        eligibilityMessage.classList.add('bg-success', 'text-white'); // Green background for qualified
                    } else {
                        eligibilityMessage.classList.add('bg-danger', 'text-white'); // Red background for not qualified
                    }

                    // Update career advice content
                    const spinner = document.getElementById('careerAdviceSpinner');
                    const content = document.getElementById('careerAdviceContent');
                    spinner.style.display = 'none';
                    content.style.display = 'block';
                    content.innerHTML = data.advice; // Assuming 'advice' is part of the response
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Handle error, e.g., show a default message
                    eligibilityText.textContent = 'Error loading eligibility information.';
                    eligibilityMessage.classList.add('bg-danger', 'text-white'); // Default to red background on error
                });
        }
</script>

