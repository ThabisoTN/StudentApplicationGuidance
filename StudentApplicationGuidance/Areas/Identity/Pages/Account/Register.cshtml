@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">Create Account</h2>
                    <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

                        <div class="mb-3">
                            <input asp-for="Input.FirstName" class="form-control" autocomplete="given-name" aria-required="true" placeholder="First Name" />
                            <span asp-validation-for="Input.FirstName" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <input asp-for="Input.LastName" class="form-control" autocomplete="family-name" aria-required="true" placeholder="Last Name" />
                            <span asp-validation-for="Input.LastName" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <select asp-for="Input.ProvinceId" class="form-select" asp-items="@Model.ProvinceOptions">
                                <option value="">Select a province</option>
                            </select>
                            <span asp-validation-for="Input.ProvinceId" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <select asp-for="Input.FundingSourceId" class="form-select" asp-items="@Model.FundingSourceOptions">
                                <option value="">Select a funding source</option>
                            </select>
                            <span asp-validation-for="Input.FundingSourceId" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Email" />
                            <span asp-validation-for="Input.Email" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Password" id="password" />
                            <span asp-validation-for="Input.Password" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm Password" id="confirmPassword" />
                            <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                        </div>

                        <div id="passwordRequirements">
                            <p>Your password has:</p>
                            <ul>
                                <li id="lengthRequirement" class="text-danger">8 or more characters</li>
                                <li id="letterRequirement" class="text-danger">At least 1 letter or symbol</li>
                                <li id="numberRequirement" class="text-danger">At least 1 number</li>
                            </ul>
                        </div>

                        <div class="d-grid">
                            <button id="registerSubmit" type="submit" class="btn btn-primary btn-lg">Register</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-md-6 col-md-offset-2">
    <section>
        @{
            if ((Model.ExternalLogins?.Count ?? 0) == 0)
            {
                <div></div>
            }
            else
            {
                <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                    <div>
                        <p>
                            @foreach (var provider in Model.ExternalLogins!)
                            {
                                <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                            }
                        </p>
                    </div>
                </form>
            }
        }
    </section>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const lengthRequirement = document.getElementById('lengthRequirement');
            const letterRequirement = document.getElementById('letterRequirement');
            const numberRequirement = document.getElementById('numberRequirement');

            passwordInput.addEventListener('input', validatePassword);
            confirmPasswordInput.addEventListener('input', validatePassword);

            function validatePassword() {
                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                // Check length
                if (password.length >= 8) {
                    lengthRequirement.classList.remove('text-danger');
                    lengthRequirement.classList.add('text-success');
                } else {
                    lengthRequirement.classList.remove('text-success');
                    lengthRequirement.classList.add('text-danger');
                }

                // Check for letter or symbol
                if (/[a-zA-Z]/.test(password) || /[^a-zA-Z0-9]/.test(password)) {
                    letterRequirement.classList.remove('text-danger');
                    letterRequirement.classList.add('text-success');
                } else {
                    letterRequirement.classList.remove('text-success');
                    letterRequirement.classList.add('text-danger');
                }

                // Check for number
                if (/\d/.test(password)) {
                    numberRequirement.classList.remove('text-danger');
                    numberRequirement.classList.add('text-success');
                } else {
                    numberRequirement.classList.remove('text-success');
                    numberRequirement.classList.add('text-danger');
                }

                // Check if passwords match
                if (password === confirmPassword) {
                    confirmPasswordInput.setCustomValidity('');
                } else {
                    confirmPasswordInput.setCustomValidity('Passwords do not match');
                }
            }
        });
    </script>
}
